#!/usr/bin/env ruby

require "foobara/load_dotenv"

Foobara::LoadDotenv.run!(env: "development", dir: __dir__)

require "foobara/anthropic_api"
require "foobara/open_ai_api"
require "foobara/ollama_api"

require "foobara/llm_backed_command"
require "foobara/sh_cli_connector"
require "foobara/local_files_crud_driver"

Foobara::Persistence.default_crud_driver = Foobara::LocalFilesCrudDriver.new

class Capybara < Foobara::Entity
  attributes do
    id :integer
    name :string, :required
    age :integer, :required
  end

  primary_key :id
end

class CreateCapybara < Foobara::Command
  inputs Capybara.attributes_for_create
  result Capybara

  def execute
    create_capybara

    capybara
  end

  attr_accessor :capybara

  def create_capybara
    self.capybara = Capybara.create(inputs)
  end
end

class SelectOldestCapybara < Foobara::LlmBackedCommand
  description "Takes a list of Capybara records and returns the Capybara record with the greatest age."

  inputs do
    capybaras [Capybara], :required, "Capybara records to choose the oldest from"
    llm_model Foobara::Ai::AnswerBot::Types.model_enum, default: "claude-3-7-sonnet-20250219"
  end

  result Capybara
end

connector = Foobara::CommandConnectors::ShCliConnector.new

connector.connect(CreateCapybara)
connector.connect(SelectOldestCapybara)

connector.run(ARGV)
